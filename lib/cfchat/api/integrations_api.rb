=begin
#CF Chat

#This is the API documentation for CF Chat server.

The version of the OpenAPI document: 1.0.0
Contact: support@clickfunnels.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Cfchat
  class IntegrationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an integration hook
    # Create an integration hook
    # @param account_id [Integer] The numeric ID of the account
    # @param data [IntegrationsHookCreatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [IntegrationsHook]
    def create_an_integration_hook(account_id, data, opts = {})
      data, _status_code, _headers = create_an_integration_hook_with_http_info(account_id, data, opts)
      data
    end

    # Create an integration hook
    # Create an integration hook
    # @param account_id [Integer] The numeric ID of the account
    # @param data [IntegrationsHookCreatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntegrationsHook, Integer, Hash)>] IntegrationsHook data, response status code and response headers
    def create_an_integration_hook_with_http_info(account_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.create_an_integration_hook ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling IntegrationsApi.create_an_integration_hook"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling IntegrationsApi.create_an_integration_hook"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/integrations/hooks'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'IntegrationsHook'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"IntegrationsApi.create_an_integration_hook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#create_an_integration_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Integration Hook
    # Delete an Integration Hook
    # @param account_id [Integer] The numeric ID of the account
    # @param hook_id [Integer] The numeric ID of the integration hook
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_an_integration_hook(account_id, hook_id, opts = {})
      delete_an_integration_hook_with_http_info(account_id, hook_id, opts)
      nil
    end

    # Delete an Integration Hook
    # Delete an Integration Hook
    # @param account_id [Integer] The numeric ID of the account
    # @param hook_id [Integer] The numeric ID of the integration hook
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_an_integration_hook_with_http_info(account_id, hook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.delete_an_integration_hook ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling IntegrationsApi.delete_an_integration_hook"
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling IntegrationsApi.delete_an_integration_hook"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/integrations/hooks/{hook_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'hook_id' + '}', CGI.escape(hook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"IntegrationsApi.delete_an_integration_hook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#delete_an_integration_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all the Integrations
    # Get the details of all Integrations available for the account
    # @param account_id [Integer] The numeric ID of the account
    # @param [Hash] opts the optional parameters
    # @return [Array<IntegrationsApp>]
    def get_details_of_all_integrations(account_id, opts = {})
      data, _status_code, _headers = get_details_of_all_integrations_with_http_info(account_id, opts)
      data
    end

    # List all the Integrations
    # Get the details of all Integrations available for the account
    # @param account_id [Integer] The numeric ID of the account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<IntegrationsApp>, Integer, Hash)>] Array<IntegrationsApp> data, response status code and response headers
    def get_details_of_all_integrations_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.get_details_of_all_integrations ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling IntegrationsApi.get_details_of_all_integrations"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/integrations/apps'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<IntegrationsApp>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"IntegrationsApi.get_details_of_all_integrations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#get_details_of_all_integrations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Integration Hook
    # Update an Integration Hook
    # @param account_id [Integer] The numeric ID of the account
    # @param hook_id [Integer] The numeric ID of the integration hook
    # @param data [IntegrationsHookUpdatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [IntegrationsHook]
    def update_an_integrations_hook(account_id, hook_id, data, opts = {})
      data, _status_code, _headers = update_an_integrations_hook_with_http_info(account_id, hook_id, data, opts)
      data
    end

    # Update an Integration Hook
    # Update an Integration Hook
    # @param account_id [Integer] The numeric ID of the account
    # @param hook_id [Integer] The numeric ID of the integration hook
    # @param data [IntegrationsHookUpdatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntegrationsHook, Integer, Hash)>] IntegrationsHook data, response status code and response headers
    def update_an_integrations_hook_with_http_info(account_id, hook_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.update_an_integrations_hook ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling IntegrationsApi.update_an_integrations_hook"
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling IntegrationsApi.update_an_integrations_hook"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling IntegrationsApi.update_an_integrations_hook"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/integrations/hooks/{hook_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'hook_id' + '}', CGI.escape(hook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'IntegrationsHook'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"IntegrationsApi.update_an_integrations_hook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#update_an_integrations_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
