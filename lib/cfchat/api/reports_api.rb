=begin
#CF Chat

#This is the API documentation for CF Chat server.

The version of the OpenAPI document: 1.0.0
Contact: support@clickfunnels.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Cfchat
  class ReportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Account Conversation Metrics
    # Get conversation metrics for Account
    # @param account_id [Integer] The numeric ID of the account
    # @param type [String] Type of report
    # @param [Hash] opts the optional parameters
    # @return [GetAccountConversationMetrics200Response]
    def get_account_conversation_metrics(account_id, type, opts = {})
      data, _status_code, _headers = get_account_conversation_metrics_with_http_info(account_id, type, opts)
      data
    end

    # Account Conversation Metrics
    # Get conversation metrics for Account
    # @param account_id [Integer] The numeric ID of the account
    # @param type [String] Type of report
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccountConversationMetrics200Response, Integer, Hash)>] GetAccountConversationMetrics200Response data, response status code and response headers
    def get_account_conversation_metrics_with_http_info(account_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.get_account_conversation_metrics ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReportsApi.get_account_conversation_metrics"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ReportsApi.get_account_conversation_metrics"
      end
      # verify enum value
      allowable_values = ["account"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{account_id}/reports/conversations'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAccountConversationMetrics200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"ReportsApi.get_account_conversation_metrics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#get_account_conversation_metrics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Agent Conversation Metrics
    # Get conversation metrics for Agent
    # @param account_id [Integer] The numeric ID of the account
    # @param type [String] Type of report
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id The numeric ID of the user
    # @return [Array<AgentConversationMetrics>]
    def get_agent_conversation_metrics(account_id, type, opts = {})
      data, _status_code, _headers = get_agent_conversation_metrics_with_http_info(account_id, type, opts)
      data
    end

    # Agent Conversation Metrics
    # Get conversation metrics for Agent
    # @param account_id [Integer] The numeric ID of the account
    # @param type [String] Type of report
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id The numeric ID of the user
    # @return [Array<(Array<AgentConversationMetrics>, Integer, Hash)>] Array<AgentConversationMetrics> data, response status code and response headers
    def get_agent_conversation_metrics_with_http_info(account_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.get_agent_conversation_metrics ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReportsApi.get_agent_conversation_metrics"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ReportsApi.get_agent_conversation_metrics"
      end
      # verify enum value
      allowable_values = ["agent"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{account_id}/reports/conversations/'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AgentConversationMetrics>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"ReportsApi.get_agent_conversation_metrics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#get_agent_conversation_metrics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Account reports
    # Get Account reports for a specific type, metric and date range
    # @param account_id [Integer] The numeric ID of the account
    # @param metric [String] The type of metric
    # @param type [String] Type of report
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The Id of specific object in case of agent/inbox/label
    # @option opts [String] :since The timestamp from where report should start.
    # @option opts [String] :_until The timestamp from where report should stop.
    # @return [Array<ListAllConversationStatistics200ResponseInner>]
    def list_all_conversation_statistics(account_id, metric, type, opts = {})
      data, _status_code, _headers = list_all_conversation_statistics_with_http_info(account_id, metric, type, opts)
      data
    end

    # Get Account reports
    # Get Account reports for a specific type, metric and date range
    # @param account_id [Integer] The numeric ID of the account
    # @param metric [String] The type of metric
    # @param type [String] Type of report
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The Id of specific object in case of agent/inbox/label
    # @option opts [String] :since The timestamp from where report should start.
    # @option opts [String] :_until The timestamp from where report should stop.
    # @return [Array<(Array<ListAllConversationStatistics200ResponseInner>, Integer, Hash)>] Array<ListAllConversationStatistics200ResponseInner> data, response status code and response headers
    def list_all_conversation_statistics_with_http_info(account_id, metric, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.list_all_conversation_statistics ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReportsApi.list_all_conversation_statistics"
      end
      # verify the required parameter 'metric' is set
      if @api_client.config.client_side_validation && metric.nil?
        fail ArgumentError, "Missing the required parameter 'metric' when calling ReportsApi.list_all_conversation_statistics"
      end
      # verify enum value
      allowable_values = ["conversations_count", "incoming_messages_count", "outgoing_messages_count", "avg_first_response_time", "avg_resolution_time", "resolutions_count"]
      if @api_client.config.client_side_validation && !allowable_values.include?(metric)
        fail ArgumentError, "invalid value for \"metric\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ReportsApi.list_all_conversation_statistics"
      end
      # verify enum value
      allowable_values = ["account", "agent", "inbox", "label", "team"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{account_id}/reports'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'metric'] = metric
      query_params[:'type'] = type
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListAllConversationStatistics200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"ReportsApi.list_all_conversation_statistics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#list_all_conversation_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Account reports summary
    # Get Account reports summary for a specific type and date range
    # @param account_id [Integer] The numeric ID of the account
    # @param type [String] Type of report
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The Id of specific object in case of agent/inbox/label
    # @option opts [String] :since The timestamp from where report should start.
    # @option opts [String] :_until The timestamp from where report should stop.
    # @return [AccountSummary]
    def list_all_conversation_statistics_summary(account_id, type, opts = {})
      data, _status_code, _headers = list_all_conversation_statistics_summary_with_http_info(account_id, type, opts)
      data
    end

    # Get Account reports summary
    # Get Account reports summary for a specific type and date range
    # @param account_id [Integer] The numeric ID of the account
    # @param type [String] Type of report
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id The Id of specific object in case of agent/inbox/label
    # @option opts [String] :since The timestamp from where report should start.
    # @option opts [String] :_until The timestamp from where report should stop.
    # @return [Array<(AccountSummary, Integer, Hash)>] AccountSummary data, response status code and response headers
    def list_all_conversation_statistics_summary_with_http_info(account_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.list_all_conversation_statistics_summary ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReportsApi.list_all_conversation_statistics_summary"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ReportsApi.list_all_conversation_statistics_summary"
      end
      # verify enum value
      allowable_values = ["account", "agent", "inbox", "label", "team"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v2/accounts/{account_id}/reports/summary'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountSummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"ReportsApi.list_all_conversation_statistics_summary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#list_all_conversation_statistics_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
