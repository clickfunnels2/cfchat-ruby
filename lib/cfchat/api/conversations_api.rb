=begin
#CF Chat

#This is the API documentation for CF Chat server.

The version of the OpenAPI document: 1.0.0
Contact: support@clickfunnels.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Cfchat
  class ConversationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Conversations Filter
    # Filter conversations with custom filter options and pagination
    # @param account_id [Integer] The numeric ID of the account
    # @param payload [Array<ContactFilterRequestInner>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @return [ConversationList]
    def conversation_filter(account_id, payload, opts = {})
      data, _status_code, _headers = conversation_filter_with_http_info(account_id, payload, opts)
      data
    end

    # Conversations Filter
    # Filter conversations with custom filter options and pagination
    # @param account_id [Integer] The numeric ID of the account
    # @param payload [Array<ContactFilterRequestInner>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @return [Array<(ConversationList, Integer, Hash)>] ConversationList data, response status code and response headers
    def conversation_filter_with_http_info(account_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversation_filter ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ConversationsApi.conversation_filter"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ConversationsApi.conversation_filter"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/conversations/filter'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payload)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey', 'agentBotApiKey']

      new_options = opts.merge(
        :operation => :"ConversationsApi.conversation_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversation_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Conversations List
    # List all the conversations with pagination
    # @param account_id [Integer] The numeric ID of the account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :assignee_type Filter conversations by assignee type. (default to 'all')
    # @option opts [String] :status Filter by conversation status. (default to 'open')
    # @option opts [String] :q Filters conversations with messages containing the search term
    # @option opts [Integer] :inbox_id 
    # @option opts [Integer] :team_id 
    # @option opts [Array<String>] :labels 
    # @option opts [Integer] :page paginate through conversations (default to 1)
    # @return [ConversationList]
    def conversation_list(account_id, opts = {})
      data, _status_code, _headers = conversation_list_with_http_info(account_id, opts)
      data
    end

    # Conversations List
    # List all the conversations with pagination
    # @param account_id [Integer] The numeric ID of the account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :assignee_type Filter conversations by assignee type. (default to 'all')
    # @option opts [String] :status Filter by conversation status. (default to 'open')
    # @option opts [String] :q Filters conversations with messages containing the search term
    # @option opts [Integer] :inbox_id 
    # @option opts [Integer] :team_id 
    # @option opts [Array<String>] :labels 
    # @option opts [Integer] :page paginate through conversations (default to 1)
    # @return [Array<(ConversationList, Integer, Hash)>] ConversationList data, response status code and response headers
    def conversation_list_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversation_list ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ConversationsApi.conversation_list"
      end
      allowable_values = ["me", "unassigned", "all", "assigned"]
      if @api_client.config.client_side_validation && opts[:'assignee_type'] && !allowable_values.include?(opts[:'assignee_type'])
        fail ArgumentError, "invalid value for \"assignee_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["open", "resolved", "pending", "snoozed"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/conversations'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'assignee_type'] = opts[:'assignee_type'] if !opts[:'assignee_type'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'inbox_id'] = opts[:'inbox_id'] if !opts[:'inbox_id'].nil?
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?
      query_params[:'labels'] = @api_client.build_collection_param(opts[:'labels'], :csv) if !opts[:'labels'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"ConversationsApi.conversation_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversation_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Conversation Counts
    # Get open, unassigned and all Conversation counts
    # @param account_id [Integer] The numeric ID of the account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Filter by conversation status. (default to 'open')
    # @option opts [String] :q Filters conversations with messages containing the search term
    # @option opts [Integer] :inbox_id 
    # @option opts [Integer] :team_id 
    # @option opts [Array<String>] :labels 
    # @return [ConversationListMeta200Response]
    def conversation_list_meta(account_id, opts = {})
      data, _status_code, _headers = conversation_list_meta_with_http_info(account_id, opts)
      data
    end

    # Get Conversation Counts
    # Get open, unassigned and all Conversation counts
    # @param account_id [Integer] The numeric ID of the account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Filter by conversation status. (default to 'open')
    # @option opts [String] :q Filters conversations with messages containing the search term
    # @option opts [Integer] :inbox_id 
    # @option opts [Integer] :team_id 
    # @option opts [Array<String>] :labels 
    # @return [Array<(ConversationListMeta200Response, Integer, Hash)>] ConversationListMeta200Response data, response status code and response headers
    def conversation_list_meta_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversation_list_meta ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ConversationsApi.conversation_list_meta"
      end
      allowable_values = ["open", "resolved", "pending", "snoozed"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/conversations/meta'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'inbox_id'] = opts[:'inbox_id'] if !opts[:'inbox_id'].nil?
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?
      query_params[:'labels'] = @api_client.build_collection_param(opts[:'labels'], :csv) if !opts[:'labels'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationListMeta200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"ConversationsApi.conversation_list_meta",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversation_list_meta\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Conversation Details
    # Get all details regarding a conversation with all messages in the conversation
    # @param account_id [Integer] The numeric ID of the account
    # @param conversation_id [Integer] The numeric ID of the conversation
    # @param [Hash] opts the optional parameters
    # @return [ConversationShow]
    def get_details_of_a_conversation(account_id, conversation_id, opts = {})
      data, _status_code, _headers = get_details_of_a_conversation_with_http_info(account_id, conversation_id, opts)
      data
    end

    # Conversation Details
    # Get all details regarding a conversation with all messages in the conversation
    # @param account_id [Integer] The numeric ID of the account
    # @param conversation_id [Integer] The numeric ID of the conversation
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationShow, Integer, Hash)>] ConversationShow data, response status code and response headers
    def get_details_of_a_conversation_with_http_info(account_id, conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.get_details_of_a_conversation ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ConversationsApi.get_details_of_a_conversation"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_details_of_a_conversation"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/conversations/{conversation_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationShow'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"ConversationsApi.get_details_of_a_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_details_of_a_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create New Conversation
    # Creating a conversation in chatwoot requires a source id.    Learn more about source_id: https://github.com/chatwoot/chatwoot/wiki/Building-on-Top-of-Chatwoot:-Importing-Existing-Contacts-and-Creating-Conversations
    # @param account_id [Integer] The numeric ID of the account
    # @param data [NewConversationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [NewConversation200Response]
    def new_conversation(account_id, data, opts = {})
      data, _status_code, _headers = new_conversation_with_http_info(account_id, data, opts)
      data
    end

    # Create New Conversation
    # Creating a conversation in chatwoot requires a source id.    Learn more about source_id: https://github.com/chatwoot/chatwoot/wiki/Building-on-Top-of-Chatwoot:-Importing-Existing-Contacts-and-Creating-Conversations
    # @param account_id [Integer] The numeric ID of the account
    # @param data [NewConversationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NewConversation200Response, Integer, Hash)>] NewConversation200Response data, response status code and response headers
    def new_conversation_with_http_info(account_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.new_conversation ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ConversationsApi.new_conversation"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling ConversationsApi.new_conversation"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/conversations'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'NewConversation200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey', 'agentBotApiKey']

      new_options = opts.merge(
        :operation => :"ConversationsApi.new_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#new_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Toggle Status
    # Toggles the status of the conversation between open and resolved
    # @param account_id [Integer] The numeric ID of the account
    # @param conversation_id [Integer] The numeric ID of the conversation
    # @param data [ToggleStatusOfAConversationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationStatusToggle]
    def toggle_status_of_a_conversation(account_id, conversation_id, data, opts = {})
      data, _status_code, _headers = toggle_status_of_a_conversation_with_http_info(account_id, conversation_id, data, opts)
      data
    end

    # Toggle Status
    # Toggles the status of the conversation between open and resolved
    # @param account_id [Integer] The numeric ID of the account
    # @param conversation_id [Integer] The numeric ID of the conversation
    # @param data [ToggleStatusOfAConversationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationStatusToggle, Integer, Hash)>] ConversationStatusToggle data, response status code and response headers
    def toggle_status_of_a_conversation_with_http_info(account_id, conversation_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.toggle_status_of_a_conversation ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ConversationsApi.toggle_status_of_a_conversation"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.toggle_status_of_a_conversation"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling ConversationsApi.toggle_status_of_a_conversation"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/conversations/{conversation_id}/toggle_status'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationStatusToggle'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey', 'agentBotApiKey']

      new_options = opts.merge(
        :operation => :"ConversationsApi.toggle_status_of_a_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#toggle_status_of_a_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
