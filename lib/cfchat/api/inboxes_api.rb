=begin
#CF Chat

#This is the API documentation for CF Chat server.

The version of the OpenAPI document: 1.0.0
Contact: support@clickfunnels.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Cfchat
  class InboxesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a New Agent
    # Add a new Agent to Inbox
    # @param account_id [Integer] The numeric ID of the account
    # @param data [AddNewAgentToInboxRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Agent>]
    def add_new_agent_to_inbox(account_id, data, opts = {})
      data, _status_code, _headers = add_new_agent_to_inbox_with_http_info(account_id, data, opts)
      data
    end

    # Add a New Agent
    # Add a new Agent to Inbox
    # @param account_id [Integer] The numeric ID of the account
    # @param data [AddNewAgentToInboxRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Agent>, Integer, Hash)>] Array<Agent> data, response status code and response headers
    def add_new_agent_to_inbox_with_http_info(account_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.add_new_agent_to_inbox ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InboxesApi.add_new_agent_to_inbox"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling InboxesApi.add_new_agent_to_inbox"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/inbox_members'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Agent>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"InboxesApi.add_new_agent_to_inbox",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#add_new_agent_to_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an Agent from Inbox
    # Remove an Agent from Inbox
    # @param account_id [Integer] The numeric ID of the account
    # @param data [DeleteAgentInInboxRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_agent_in_inbox(account_id, data, opts = {})
      delete_agent_in_inbox_with_http_info(account_id, data, opts)
      nil
    end

    # Remove an Agent from Inbox
    # Remove an Agent from Inbox
    # @param account_id [Integer] The numeric ID of the account
    # @param data [DeleteAgentInInboxRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_agent_in_inbox_with_http_info(account_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.delete_agent_in_inbox ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InboxesApi.delete_agent_in_inbox"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling InboxesApi.delete_agent_in_inbox"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/inbox_members'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"InboxesApi.delete_agent_in_inbox",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#delete_agent_in_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an inbox
    # Get an inbox available in the current account
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the inbox
    # @param [Hash] opts the optional parameters
    # @return [Inbox]
    def get_inbox(account_id, id, opts = {})
      data, _status_code, _headers = get_inbox_with_http_info(account_id, id, opts)
      data
    end

    # Get an inbox
    # Get an inbox available in the current account
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the inbox
    # @param [Hash] opts the optional parameters
    # @return [Array<(Inbox, Integer, Hash)>] Inbox data, response status code and response headers
    def get_inbox_with_http_info(account_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.get_inbox ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InboxesApi.get_inbox"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InboxesApi.get_inbox"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/inboxes/{id}/'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Inbox'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"InboxesApi.get_inbox",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#get_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show Inbox Agent Bot
    # See if an agent bot is associated to the Inbox
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the inbox
    # @param [Hash] opts the optional parameters
    # @return [AgentBot]
    def get_inbox_agent_bot(account_id, id, opts = {})
      data, _status_code, _headers = get_inbox_agent_bot_with_http_info(account_id, id, opts)
      data
    end

    # Show Inbox Agent Bot
    # See if an agent bot is associated to the Inbox
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the inbox
    # @param [Hash] opts the optional parameters
    # @return [Array<(AgentBot, Integer, Hash)>] AgentBot data, response status code and response headers
    def get_inbox_agent_bot_with_http_info(account_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.get_inbox_agent_bot ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InboxesApi.get_inbox_agent_bot"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InboxesApi.get_inbox_agent_bot"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/inboxes/{id}/agent_bot'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AgentBot'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"InboxesApi.get_inbox_agent_bot",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#get_inbox_agent_bot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Agents in Inbox
    # Get Details of Agents in an Inbox
    # @param account_id [Integer] The numeric ID of the account
    # @param inbox_id [Integer] The ID of the Inbox
    # @param [Hash] opts the optional parameters
    # @return [Array<Agent>]
    def get_inbox_members(account_id, inbox_id, opts = {})
      data, _status_code, _headers = get_inbox_members_with_http_info(account_id, inbox_id, opts)
      data
    end

    # List Agents in Inbox
    # Get Details of Agents in an Inbox
    # @param account_id [Integer] The numeric ID of the account
    # @param inbox_id [Integer] The ID of the Inbox
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Agent>, Integer, Hash)>] Array<Agent> data, response status code and response headers
    def get_inbox_members_with_http_info(account_id, inbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.get_inbox_members ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InboxesApi.get_inbox_members"
      end
      # verify the required parameter 'inbox_id' is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbox_id' when calling InboxesApi.get_inbox_members"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/inbox_members/{inbox_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'inbox_id' + '}', CGI.escape(inbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Agent>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"InboxesApi.get_inbox_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#get_inbox_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an inbox
    # You can create more than one website inbox in each account
    # @param account_id [Integer] The numeric ID of the account
    # @param data [InboxCreationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Inbox]
    def inbox_creation(account_id, data, opts = {})
      data, _status_code, _headers = inbox_creation_with_http_info(account_id, data, opts)
      data
    end

    # Create an inbox
    # You can create more than one website inbox in each account
    # @param account_id [Integer] The numeric ID of the account
    # @param data [InboxCreationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Inbox, Integer, Hash)>] Inbox data, response status code and response headers
    def inbox_creation_with_http_info(account_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.inbox_creation ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InboxesApi.inbox_creation"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling InboxesApi.inbox_creation"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/inboxes/'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'Inbox'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"InboxesApi.inbox_creation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#inbox_creation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all inboxes
    # List all inboxes available in the current account
    # @param account_id [Integer] The numeric ID of the account
    # @param [Hash] opts the optional parameters
    # @return [Array<Inbox>]
    def list_all_inboxes(account_id, opts = {})
      data, _status_code, _headers = list_all_inboxes_with_http_info(account_id, opts)
      data
    end

    # List all inboxes
    # List all inboxes available in the current account
    # @param account_id [Integer] The numeric ID of the account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Inbox>, Integer, Hash)>] Array<Inbox> data, response status code and response headers
    def list_all_inboxes_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.list_all_inboxes ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InboxesApi.list_all_inboxes"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/inboxes'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Inbox>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"InboxesApi.list_all_inboxes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#list_all_inboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add or remove agent bot
    # To add an agent bot pass agent_bot id, to remove agent bot from an inbox pass null
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the inbox
    # @param data [UpdateAgentBotRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_agent_bot(account_id, id, data, opts = {})
      update_agent_bot_with_http_info(account_id, id, data, opts)
      nil
    end

    # Add or remove agent bot
    # To add an agent bot pass agent_bot id, to remove agent bot from an inbox pass null
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the inbox
    # @param data [UpdateAgentBotRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_agent_bot_with_http_info(account_id, id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.update_agent_bot ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InboxesApi.update_agent_bot"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InboxesApi.update_agent_bot"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling InboxesApi.update_agent_bot"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/inboxes/{id}/set_agent_bot'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"InboxesApi.update_agent_bot",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#update_agent_bot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Agents in Inbox
    # All agents except the one passed in params will be removed
    # @param account_id [Integer] The numeric ID of the account
    # @param data [AddNewAgentToInboxRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Agent>]
    def update_agents_in_inbox(account_id, data, opts = {})
      data, _status_code, _headers = update_agents_in_inbox_with_http_info(account_id, data, opts)
      data
    end

    # Update Agents in Inbox
    # All agents except the one passed in params will be removed
    # @param account_id [Integer] The numeric ID of the account
    # @param data [AddNewAgentToInboxRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Agent>, Integer, Hash)>] Array<Agent> data, response status code and response headers
    def update_agents_in_inbox_with_http_info(account_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.update_agents_in_inbox ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InboxesApi.update_agents_in_inbox"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling InboxesApi.update_agents_in_inbox"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/inbox_members'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Agent>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"InboxesApi.update_agents_in_inbox",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#update_agents_in_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Inbox
    # Add avatar and disable auto assignment for an inbox
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the inbox
    # @param data [UpdateInboxRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Inbox]
    def update_inbox(account_id, id, data, opts = {})
      data, _status_code, _headers = update_inbox_with_http_info(account_id, id, data, opts)
      data
    end

    # Update Inbox
    # Add avatar and disable auto assignment for an inbox
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the inbox
    # @param data [UpdateInboxRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Inbox, Integer, Hash)>] Inbox data, response status code and response headers
    def update_inbox_with_http_info(account_id, id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.update_inbox ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InboxesApi.update_inbox"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InboxesApi.update_inbox"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling InboxesApi.update_inbox"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/inboxes/{id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'Inbox'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"InboxesApi.update_inbox",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#update_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
