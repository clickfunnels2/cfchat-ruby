=begin
#CF Chat

#This is the API documentation for CF Chat server.

The version of the OpenAPI document: 1.0.0
Contact: support@clickfunnels.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Cfchat
  class ContactsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Contact Conversations
    # Get conversations associated to that contact
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the contact
    # @param [Hash] opts the optional parameters
    # @return [Array<ContactConversationsInner>]
    def contact_conversations(account_id, id, opts = {})
      data, _status_code, _headers = contact_conversations_with_http_info(account_id, id, opts)
      data
    end

    # Contact Conversations
    # Get conversations associated to that contact
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the contact
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContactConversationsInner>, Integer, Hash)>] Array<ContactConversationsInner> data, response status code and response headers
    def contact_conversations_with_http_info(account_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.contact_conversations ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ContactsApi.contact_conversations"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContactsApi.contact_conversations"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/contacts/{id}/conversations'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ContactConversationsInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"ContactsApi.contact_conversations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#contact_conversations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Contact
    # Create a new Contact
    # @param account_id [Integer] The numeric ID of the account
    # @param data [ContactCreate] 
    # @param [Hash] opts the optional parameters
    # @return [ExtendedContact]
    def contact_create(account_id, data, opts = {})
      data, _status_code, _headers = contact_create_with_http_info(account_id, data, opts)
      data
    end

    # Create Contact
    # Create a new Contact
    # @param account_id [Integer] The numeric ID of the account
    # @param data [ContactCreate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExtendedContact, Integer, Hash)>] ExtendedContact data, response status code and response headers
    def contact_create_with_http_info(account_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.contact_create ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ContactsApi.contact_create"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling ContactsApi.contact_create"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/contacts'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'ExtendedContact'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"ContactsApi.contact_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#contact_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Contact
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the contact
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def contact_delete(account_id, id, opts = {})
      contact_delete_with_http_info(account_id, id, opts)
      nil
    end

    # Delete Contact
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the contact
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def contact_delete_with_http_info(account_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.contact_delete ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ContactsApi.contact_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContactsApi.contact_delete"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/contacts/{id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"ContactsApi.contact_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#contact_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show Contact
    # Get a contact belonging to the account using ID
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the contact
    # @param [Hash] opts the optional parameters
    # @return [ExtendedContact]
    def contact_details(account_id, id, opts = {})
      data, _status_code, _headers = contact_details_with_http_info(account_id, id, opts)
      data
    end

    # Show Contact
    # Get a contact belonging to the account using ID
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the contact
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExtendedContact, Integer, Hash)>] ExtendedContact data, response status code and response headers
    def contact_details_with_http_info(account_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.contact_details ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ContactsApi.contact_details"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContactsApi.contact_details"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/contacts/{id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExtendedContact'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"ContactsApi.contact_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#contact_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Contact Filter
    # Filter contacts with custom filter options and pagination
    # @param account_id [Integer] The numeric ID of the account
    # @param payload [Array<ContactFilterRequestInner>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @return [Array<ContactListInner>]
    def contact_filter(account_id, payload, opts = {})
      data, _status_code, _headers = contact_filter_with_http_info(account_id, payload, opts)
      data
    end

    # Contact Filter
    # Filter contacts with custom filter options and pagination
    # @param account_id [Integer] The numeric ID of the account
    # @param payload [Array<ContactFilterRequestInner>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @return [Array<(Array<ContactListInner>, Integer, Hash)>] Array<ContactListInner> data, response status code and response headers
    def contact_filter_with_http_info(account_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.contact_filter ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ContactsApi.contact_filter"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ContactsApi.contact_filter"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/contacts/filter'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payload)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ContactListInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey', 'agentBotApiKey']

      new_options = opts.merge(
        :operation => :"ContactsApi.contact_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#contact_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Contacts
    # Listing all the resolved contacts with pagination (Page size = 15) . Resolved contacts are the ones with a value for identifier, email or phone number
    # @param account_id [Integer] The numeric ID of the account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort The attribute by which list should be sorted
    # @option opts [Integer] :page The page parameter (default to 1)
    # @return [Array<ContactListInner>]
    def contact_list(account_id, opts = {})
      data, _status_code, _headers = contact_list_with_http_info(account_id, opts)
      data
    end

    # List Contacts
    # Listing all the resolved contacts with pagination (Page size &#x3D; 15) . Resolved contacts are the ones with a value for identifier, email or phone number
    # @param account_id [Integer] The numeric ID of the account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort The attribute by which list should be sorted
    # @option opts [Integer] :page The page parameter (default to 1)
    # @return [Array<(Array<ContactListInner>, Integer, Hash)>] Array<ContactListInner> data, response status code and response headers
    def contact_list_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.contact_list ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ContactsApi.contact_list"
      end
      allowable_values = ["name", "email", "phone_number", "last_activity_at", "-name", "-email", "-phone_number", "-last_activity_at"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/contacts'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ContactListInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"ContactsApi.contact_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#contact_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Contacts
    # Search the resolved contacts using a search key, currently supports email search (Page size = 15). Resolved contacts are the ones with a value for identifier, email or phone number
    # @param account_id [Integer] The numeric ID of the account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q Search using contact &#x60;name&#x60;, &#x60;identifier&#x60;, &#x60;email&#x60; or &#x60;phone number&#x60;
    # @option opts [String] :sort The attribute by which list should be sorted
    # @option opts [Integer] :page The page parameter (default to 1)
    # @return [ContactSearch200Response]
    def contact_search(account_id, opts = {})
      data, _status_code, _headers = contact_search_with_http_info(account_id, opts)
      data
    end

    # Search Contacts
    # Search the resolved contacts using a search key, currently supports email search (Page size &#x3D; 15). Resolved contacts are the ones with a value for identifier, email or phone number
    # @param account_id [Integer] The numeric ID of the account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q Search using contact &#x60;name&#x60;, &#x60;identifier&#x60;, &#x60;email&#x60; or &#x60;phone number&#x60;
    # @option opts [String] :sort The attribute by which list should be sorted
    # @option opts [Integer] :page The page parameter (default to 1)
    # @return [Array<(ContactSearch200Response, Integer, Hash)>] ContactSearch200Response data, response status code and response headers
    def contact_search_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.contact_search ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ContactsApi.contact_search"
      end
      allowable_values = ["name", "email", "phone_number", "last_activity_at", "-name", "-email", "-phone_number", "-last_activity_at"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/contacts/search'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContactSearch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"ContactsApi.contact_search",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#contact_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Contact
    # Update a contact belonging to the account using ID
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the contact
    # @param data [ContactUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [ContactBase]
    def contact_update(account_id, id, data, opts = {})
      data, _status_code, _headers = contact_update_with_http_info(account_id, id, data, opts)
      data
    end

    # Update Contact
    # Update a contact belonging to the account using ID
    # @param account_id [Integer] The numeric ID of the account
    # @param id [Float] ID of the contact
    # @param data [ContactUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContactBase, Integer, Hash)>] ContactBase data, response status code and response headers
    def contact_update_with_http_info(account_id, id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.contact_update ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ContactsApi.contact_update"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContactsApi.contact_update"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling ContactsApi.contact_update"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/contacts/{id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'ContactBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"ContactsApi.contact_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#contact_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
