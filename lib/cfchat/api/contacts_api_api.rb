=begin
#CF Chat

#This is the API documentation for CF Chat server.

The version of the OpenAPI document: 1.0.0
Contact: support@clickfunnels.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Cfchat
  class ContactsAPIApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a contact
    # Create a contact
    # @param inbox_identifier [String] The identifier obtained from API inbox channel
    # @param data [PublicContactCreateUpdatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [PublicContact]
    def create_a_contact(inbox_identifier, data, opts = {})
      data, _status_code, _headers = create_a_contact_with_http_info(inbox_identifier, data, opts)
      data
    end

    # Create a contact
    # Create a contact
    # @param inbox_identifier [String] The identifier obtained from API inbox channel
    # @param data [PublicContactCreateUpdatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicContact, Integer, Hash)>] PublicContact data, response status code and response headers
    def create_a_contact_with_http_info(inbox_identifier, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAPIApi.create_a_contact ...'
      end
      # verify the required parameter 'inbox_identifier' is set
      if @api_client.config.client_side_validation && inbox_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'inbox_identifier' when calling ContactsAPIApi.create_a_contact"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling ContactsAPIApi.create_a_contact"
      end
      # resource path
      local_var_path = '/public/api/v1/inboxes/{inbox_identifier}/contacts'.sub('{' + 'inbox_identifier' + '}', CGI.escape(inbox_identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'PublicContact'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ContactsAPIApi.create_a_contact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAPIApi#create_a_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a contact
    # Get the details of a contact
    # @param inbox_identifier [String] The identifier obtained from API inbox channel
    # @param contact_identifier [String] The source id of contact obtained on contact create
    # @param [Hash] opts the optional parameters
    # @return [PublicContact]
    def get_details_of_a_contact(inbox_identifier, contact_identifier, opts = {})
      data, _status_code, _headers = get_details_of_a_contact_with_http_info(inbox_identifier, contact_identifier, opts)
      data
    end

    # Get a contact
    # Get the details of a contact
    # @param inbox_identifier [String] The identifier obtained from API inbox channel
    # @param contact_identifier [String] The source id of contact obtained on contact create
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicContact, Integer, Hash)>] PublicContact data, response status code and response headers
    def get_details_of_a_contact_with_http_info(inbox_identifier, contact_identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAPIApi.get_details_of_a_contact ...'
      end
      # verify the required parameter 'inbox_identifier' is set
      if @api_client.config.client_side_validation && inbox_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'inbox_identifier' when calling ContactsAPIApi.get_details_of_a_contact"
      end
      # verify the required parameter 'contact_identifier' is set
      if @api_client.config.client_side_validation && contact_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'contact_identifier' when calling ContactsAPIApi.get_details_of_a_contact"
      end
      # resource path
      local_var_path = '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}'.sub('{' + 'inbox_identifier' + '}', CGI.escape(inbox_identifier.to_s)).sub('{' + 'contact_identifier' + '}', CGI.escape(contact_identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PublicContact'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ContactsAPIApi.get_details_of_a_contact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAPIApi#get_details_of_a_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a contact
    # Update a contact's attributes
    # @param inbox_identifier [String] The identifier obtained from API inbox channel
    # @param contact_identifier [String] The source id of contact obtained on contact create
    # @param data [PublicContactCreateUpdatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [PublicContact]
    def update_a_contact(inbox_identifier, contact_identifier, data, opts = {})
      data, _status_code, _headers = update_a_contact_with_http_info(inbox_identifier, contact_identifier, data, opts)
      data
    end

    # Update a contact
    # Update a contact&#39;s attributes
    # @param inbox_identifier [String] The identifier obtained from API inbox channel
    # @param contact_identifier [String] The source id of contact obtained on contact create
    # @param data [PublicContactCreateUpdatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicContact, Integer, Hash)>] PublicContact data, response status code and response headers
    def update_a_contact_with_http_info(inbox_identifier, contact_identifier, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsAPIApi.update_a_contact ...'
      end
      # verify the required parameter 'inbox_identifier' is set
      if @api_client.config.client_side_validation && inbox_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'inbox_identifier' when calling ContactsAPIApi.update_a_contact"
      end
      # verify the required parameter 'contact_identifier' is set
      if @api_client.config.client_side_validation && contact_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'contact_identifier' when calling ContactsAPIApi.update_a_contact"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling ContactsAPIApi.update_a_contact"
      end
      # resource path
      local_var_path = '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}'.sub('{' + 'inbox_identifier' + '}', CGI.escape(inbox_identifier.to_s)).sub('{' + 'contact_identifier' + '}', CGI.escape(contact_identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'PublicContact'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ContactsAPIApi.update_a_contact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsAPIApi#update_a_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
