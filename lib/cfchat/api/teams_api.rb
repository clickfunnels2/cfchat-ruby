=begin
#CF Chat

#This is the API documentation for CF Chat server.

The version of the OpenAPI document: 1.0.0
Contact: support@clickfunnels.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Cfchat
  class TeamsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a New Agent
    # Add a new Agent to Team
    # @param account_id [Integer] The numeric ID of the account
    # @param team_id [Integer] The ID of the team to be updated
    # @param data [AddNewAgentToTeamRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Agent>]
    def add_new_agent_to_team(account_id, team_id, data, opts = {})
      data, _status_code, _headers = add_new_agent_to_team_with_http_info(account_id, team_id, data, opts)
      data
    end

    # Add a New Agent
    # Add a new Agent to Team
    # @param account_id [Integer] The numeric ID of the account
    # @param team_id [Integer] The ID of the team to be updated
    # @param data [AddNewAgentToTeamRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Agent>, Integer, Hash)>] Array<Agent> data, response status code and response headers
    def add_new_agent_to_team_with_http_info(account_id, team_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.add_new_agent_to_team ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TeamsApi.add_new_agent_to_team"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.add_new_agent_to_team"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling TeamsApi.add_new_agent_to_team"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/teams/{team_id}/team_members'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Agent>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"TeamsApi.add_new_agent_to_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#add_new_agent_to_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a team
    # Create a team in the account
    # @param account_id [Integer] The numeric ID of the account
    # @param data [TeamCreateUpdatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [Team]
    def create_a_team(account_id, data, opts = {})
      data, _status_code, _headers = create_a_team_with_http_info(account_id, data, opts)
      data
    end

    # Create a team
    # Create a team in the account
    # @param account_id [Integer] The numeric ID of the account
    # @param data [TeamCreateUpdatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Team, Integer, Hash)>] Team data, response status code and response headers
    def create_a_team_with_http_info(account_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.create_a_team ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TeamsApi.create_a_team"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling TeamsApi.create_a_team"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/teams'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'Team'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"TeamsApi.create_a_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#create_a_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a team
    # Delete a team from the account
    # @param account_id [Integer] The numeric ID of the account
    # @param team_id [Integer] The ID of the team to be updated
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_a_team(account_id, team_id, opts = {})
      delete_a_team_with_http_info(account_id, team_id, opts)
      nil
    end

    # Delete a team
    # Delete a team from the account
    # @param account_id [Integer] The numeric ID of the account
    # @param team_id [Integer] The ID of the team to be updated
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_a_team_with_http_info(account_id, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.delete_a_team ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TeamsApi.delete_a_team"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.delete_a_team"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/teams/{team_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"TeamsApi.delete_a_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#delete_a_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an Agent from Team
    # Remove an Agent from Team
    # @param account_id [Integer] The numeric ID of the account
    # @param team_id [Integer] The ID of the team to be updated
    # @param data [DeleteAgentInTeamRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_agent_in_team(account_id, team_id, data, opts = {})
      delete_agent_in_team_with_http_info(account_id, team_id, data, opts)
      nil
    end

    # Remove an Agent from Team
    # Remove an Agent from Team
    # @param account_id [Integer] The numeric ID of the account
    # @param team_id [Integer] The ID of the team to be updated
    # @param data [DeleteAgentInTeamRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_agent_in_team_with_http_info(account_id, team_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.delete_agent_in_team ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TeamsApi.delete_agent_in_team"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.delete_agent_in_team"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling TeamsApi.delete_agent_in_team"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/teams/{team_id}/team_members'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"TeamsApi.delete_agent_in_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#delete_agent_in_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a team details
    # Get the details of a team in the account
    # @param account_id [Integer] The numeric ID of the account
    # @param team_id [Integer] The ID of the team to be updated
    # @param [Hash] opts the optional parameters
    # @return [Team]
    def get_details_of_a_single_team(account_id, team_id, opts = {})
      data, _status_code, _headers = get_details_of_a_single_team_with_http_info(account_id, team_id, opts)
      data
    end

    # Get a team details
    # Get the details of a team in the account
    # @param account_id [Integer] The numeric ID of the account
    # @param team_id [Integer] The ID of the team to be updated
    # @param [Hash] opts the optional parameters
    # @return [Array<(Team, Integer, Hash)>] Team data, response status code and response headers
    def get_details_of_a_single_team_with_http_info(account_id, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.get_details_of_a_single_team ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TeamsApi.get_details_of_a_single_team"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.get_details_of_a_single_team"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/teams/{team_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Team'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"TeamsApi.get_details_of_a_single_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_details_of_a_single_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Agents in Team
    # Get Details of Agents in an Team
    # @param account_id [Integer] The numeric ID of the account
    # @param team_id [Integer] The ID of the team to be updated
    # @param [Hash] opts the optional parameters
    # @return [Array<Agent>]
    def get_team_members(account_id, team_id, opts = {})
      data, _status_code, _headers = get_team_members_with_http_info(account_id, team_id, opts)
      data
    end

    # List Agents in Team
    # Get Details of Agents in an Team
    # @param account_id [Integer] The numeric ID of the account
    # @param team_id [Integer] The ID of the team to be updated
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Agent>, Integer, Hash)>] Array<Agent> data, response status code and response headers
    def get_team_members_with_http_info(account_id, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.get_team_members ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TeamsApi.get_team_members"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.get_team_members"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/teams/{team_id}/team_members'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Agent>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"TeamsApi.get_team_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_team_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all teams
    # List all teams available in the current account
    # @param account_id [Integer] The numeric ID of the account
    # @param [Hash] opts the optional parameters
    # @return [Array<Team>]
    def list_all_teams(account_id, opts = {})
      data, _status_code, _headers = list_all_teams_with_http_info(account_id, opts)
      data
    end

    # List all teams
    # List all teams available in the current account
    # @param account_id [Integer] The numeric ID of the account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Team>, Integer, Hash)>] Array<Team> data, response status code and response headers
    def list_all_teams_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.list_all_teams ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TeamsApi.list_all_teams"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/teams'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Team>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"TeamsApi.list_all_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#list_all_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a team
    # Update a team's attributes
    # @param account_id [Integer] The numeric ID of the account
    # @param team_id [Integer] The ID of the team to be updated
    # @param data [TeamCreateUpdatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [Team]
    def update_a_team(account_id, team_id, data, opts = {})
      data, _status_code, _headers = update_a_team_with_http_info(account_id, team_id, data, opts)
      data
    end

    # Update a team
    # Update a team&#39;s attributes
    # @param account_id [Integer] The numeric ID of the account
    # @param team_id [Integer] The ID of the team to be updated
    # @param data [TeamCreateUpdatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Team, Integer, Hash)>] Team data, response status code and response headers
    def update_a_team_with_http_info(account_id, team_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.update_a_team ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TeamsApi.update_a_team"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.update_a_team"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling TeamsApi.update_a_team"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/teams/{team_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'Team'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"TeamsApi.update_a_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#update_a_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Agents in Team
    # All agents except the one passed in params will be removed
    # @param account_id [Integer] The numeric ID of the account
    # @param team_id [Integer] The ID of the team to be updated
    # @param data [AddNewAgentToTeamRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Agent>]
    def update_agents_in_team(account_id, team_id, data, opts = {})
      data, _status_code, _headers = update_agents_in_team_with_http_info(account_id, team_id, data, opts)
      data
    end

    # Update Agents in Team
    # All agents except the one passed in params will be removed
    # @param account_id [Integer] The numeric ID of the account
    # @param team_id [Integer] The ID of the team to be updated
    # @param data [AddNewAgentToTeamRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Agent>, Integer, Hash)>] Array<Agent> data, response status code and response headers
    def update_agents_in_team_with_http_info(account_id, team_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.update_agents_in_team ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TeamsApi.update_agents_in_team"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.update_agents_in_team"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling TeamsApi.update_agents_in_team"
      end
      # resource path
      local_var_path = '/api/v1/accounts/{account_id}/teams/{team_id}/team_members'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json; charset=utf-8'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Agent>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['userApiKey']

      new_options = opts.merge(
        :operation => :"TeamsApi.update_agents_in_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#update_agents_in_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
